// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: protocol/book.proto

package protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Books service

func NewBooksEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Books service

type BooksService interface {
	GetBookList(ctx context.Context, in *GetBookListReq, opts ...client.CallOption) (*GetBookListRsp, error)
	AddBooks(ctx context.Context, in *AddBooksReq, opts ...client.CallOption) (*AddBooksRsp, error)
	UpdateBooks(ctx context.Context, in *UpdateBooksReq, opts ...client.CallOption) (*UpdateBooksRsp, error)
	DeleteBooks(ctx context.Context, in *DeleteBooksReq, opts ...client.CallOption) (*DeleteBooksRsp, error)
}

type booksService struct {
	c    client.Client
	name string
}

func NewBooksService(name string, c client.Client) BooksService {
	return &booksService{
		c:    c,
		name: name,
	}
}

func (c *booksService) GetBookList(ctx context.Context, in *GetBookListReq, opts ...client.CallOption) (*GetBookListRsp, error) {
	req := c.c.NewRequest(c.name, "Books.GetBookList", in)
	out := new(GetBookListRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksService) AddBooks(ctx context.Context, in *AddBooksReq, opts ...client.CallOption) (*AddBooksRsp, error) {
	req := c.c.NewRequest(c.name, "Books.AddBooks", in)
	out := new(AddBooksRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksService) UpdateBooks(ctx context.Context, in *UpdateBooksReq, opts ...client.CallOption) (*UpdateBooksRsp, error) {
	req := c.c.NewRequest(c.name, "Books.UpdateBooks", in)
	out := new(UpdateBooksRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *booksService) DeleteBooks(ctx context.Context, in *DeleteBooksReq, opts ...client.CallOption) (*DeleteBooksRsp, error) {
	req := c.c.NewRequest(c.name, "Books.DeleteBooks", in)
	out := new(DeleteBooksRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Books service

type BooksHandler interface {
	GetBookList(context.Context, *GetBookListReq, *GetBookListRsp) error
	AddBooks(context.Context, *AddBooksReq, *AddBooksRsp) error
	UpdateBooks(context.Context, *UpdateBooksReq, *UpdateBooksRsp) error
	DeleteBooks(context.Context, *DeleteBooksReq, *DeleteBooksRsp) error
}

func RegisterBooksHandler(s server.Server, hdlr BooksHandler, opts ...server.HandlerOption) error {
	type books interface {
		GetBookList(ctx context.Context, in *GetBookListReq, out *GetBookListRsp) error
		AddBooks(ctx context.Context, in *AddBooksReq, out *AddBooksRsp) error
		UpdateBooks(ctx context.Context, in *UpdateBooksReq, out *UpdateBooksRsp) error
		DeleteBooks(ctx context.Context, in *DeleteBooksReq, out *DeleteBooksRsp) error
	}
	type Books struct {
		books
	}
	h := &booksHandler{hdlr}
	return s.Handle(s.NewHandler(&Books{h}, opts...))
}

type booksHandler struct {
	BooksHandler
}

func (h *booksHandler) GetBookList(ctx context.Context, in *GetBookListReq, out *GetBookListRsp) error {
	return h.BooksHandler.GetBookList(ctx, in, out)
}

func (h *booksHandler) AddBooks(ctx context.Context, in *AddBooksReq, out *AddBooksRsp) error {
	return h.BooksHandler.AddBooks(ctx, in, out)
}

func (h *booksHandler) UpdateBooks(ctx context.Context, in *UpdateBooksReq, out *UpdateBooksRsp) error {
	return h.BooksHandler.UpdateBooks(ctx, in, out)
}

func (h *booksHandler) DeleteBooks(ctx context.Context, in *DeleteBooksReq, out *DeleteBooksRsp) error {
	return h.BooksHandler.DeleteBooks(ctx, in, out)
}
